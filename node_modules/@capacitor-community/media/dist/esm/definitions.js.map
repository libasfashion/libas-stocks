{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,wCAAwC","sourcesContent":["/// <reference types=\"@capacitor/cli\" />\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    Media?: {\n      /**\n       * Enable gallery mode on Android. This is for photo gallery-style apps, which\n       * need to access images from all apps on the device. Most use cases will not\n       * need this. Defaults to false.\n       *\n       * If you enable this, you will also need to add the\n       * READ_MEDIA_IMAGES, READ_MEDIA_VIDEOS,\n       * READ_EXTERNAL_STORAGE, and WRITE_EXTERNAL_STORAGE\n       * permissions to your AndroidManifest.xml.\n       */\n      androidGalleryMode?: boolean;\n    };\n  }\n}\n\nexport interface MediaPlugin {\n  /**\n   * Get filtered thumbnails from camera roll. iOS only.\n   *\n   * [Code Examples](https://github.com/capacitor-community/media/blob/main/example/src/components/GetMedias.tsx)\n   */\n  getMedias(options?: MediaFetchOptions): Promise<MediaResponse>;\n  /**\n   * Get a filesystem path to a full-quality media asset by its identifier. iOS only.\n   * This is not included for Android because on Android, a media asset's identifier IS its path!\n   * You can simply use the Filesystem plugin to work with it. On iOS, you have to turn the identifier into a path\n   * using this function. After that, you can use the Filesystem plugin, same as Android.\n   *\n   * [Code Examples](https://github.com/capacitor-community/media/blob/main/example/src/components/GetMedias.tsx)\n   */\n  getMediaByIdentifier(options?: {identifier: string}): Promise<MediaPath>;\n  /**\n   * Get list of albums.\n   *\n   * [Code Examples](https://github.com/capacitor-community/media/blob/main/example/src/components/GetAlbums.tsx)\n   */\n  getAlbums(): Promise<MediaAlbumResponse>;\n  /**\n   * Saves a still photo or GIF to the camera roll.\n   *\n   * On Android and iOS, this supports web URLs, base64 encoded images\n   * (e.g. data:image/jpeg;base64,...), and local files.\n   * On Android, all image formats supported by the user's photo viewer are supported.\n   * On iOS, most common image formats are supported.\n   *\n   * [Code Examples](https://github.com/capacitor-community/media/blob/main/example/src/components/SaveMedia.tsx)\n   */\n  savePhoto(options?: MediaSaveOptions): Promise<PhotoResponse>;\n  /**\n   * Saves a video to the camera roll.\n   *\n   * On Android and iOS, this supports web URLs, base64 encoded videos\n   * (e.g. data:image/mp4;base64,...), and local files.\n   * On Android, all video formats supported by the user's photo viewer are supported.\n   * On iOS, the supported formats are based on whatever iOS supports at the time.\n   *\n   * [Code Examples](https://github.com/capacitor-community/media/blob/main/example/src/components/SaveMedia.tsx)\n   */\n  saveVideo(options?: MediaSaveOptions): Promise<PhotoResponse>;\n  /**\n   * Creates an album.\n   *\n   * [Code Examples](https://github.com/capacitor-community/media/blob/main/example/src/components/CreateDemoAlbum.tsx)\n   */\n  createAlbum(options: MediaAlbumCreate): Promise<void>;\n  /**\n   * Gets the path where album folders and their corresponding photos\n   * are stored on the Android filesystem. This can be used to identify\n   * your album by more than just its name on Android, in case there\n   * are multiple albums with the same name, which is possible on Android.\n   * Just compare the albums path to the start of the album identifier when\n   * getting albums.\n   *\n   * Only available on Android.\n   *\n   * Code Examples: [basic](https://github.com/capacitor-community/media/blob/main/example/src/components/CreateDemoAlbum.tsx), [when saving media](https://github.com/capacitor-community/media/blob/main/example/src/components/SaveMedia.tsx)\n   */\n  getAlbumsPath(): Promise<AlbumsPathResponse>;\n}\n\nexport interface MediaSaveOptions {\n  /**\n   * Web URL, base64 encoded URI, or local file path to save.\n   */\n  path: string;\n  /**\n   * Album identifier from getAlbums().\n   * Since 5.0, identifier is used on both Android and iOS.\n   * Identifier is required on Android but not on iOS.\n   * On iOS 14+, if the identifier is not specified and no permissions\n   * have been requested yet, add-only permissions will be requested instead\n   * of full permissions (assuming NSPhotoLibraryAddUsageDescription\n   * is in Info.plist).\n   */\n  albumIdentifier?: string;\n  /**\n   * File name to save the image as in the album.\n   * Do not include extension. Android only.\n   */\n  fileName?: string;\n}\n\nexport interface MediaFetchOptions {\n  /**\n   * The number of photos to fetch, sorted by last created date descending. To paginate, just request a higher quantity -- OS caching should make this relatively performant.\n   */\n  quantity?: number;\n  /**\n   * The width of thumbnail to return\n   */\n  thumbnailWidth?: number;\n  /**\n   * The height of thumbnail to return\n   */\n  thumbnailHeight?: number;\n  /**\n   * The quality of thumbnail to return as JPEG (0-100)\n   */\n  thumbnailQuality?: number;\n  /**\n   * Which types of assets to return thumbnails for.\n   */\n  types?: 'photos' | 'videos' | 'all';\n  /**\n   * Which album identifier to query in (get identifier with getAlbums())\n   */\n  albumIdentifier?: string;\n  /**\n   * Sort order of returned assets by field and ascending/descending\n   */\n  sort?: MediaField | MediaSort[];\n}\n\nexport interface MediaSort {\n  key: MediaField;\n  ascending: boolean;\n}\n\n/**\n * Attributes to sort media by.\n *\n * [iOS Source](https://developer.apple.com/documentation/photokit/phfetchoptions)\n */\nexport type MediaField =\n  | 'mediaType'\n  | 'mediaSubtypes'\n  | 'sourceType'\n  | 'pixelWidth'\n  | 'pixelHeight'\n  | 'creationDate'\n  | 'modificationDate'\n  | 'isFavorite'\n  | 'burstIdentifier';\n\nexport interface MediaResponse {\n  medias: MediaAsset[];\n}\n\nexport interface AlbumsPathResponse {\n  path: string;\n}\n\nexport interface MediaAsset {\n  /**\n   * Platform-specific identifier\n   */\n  identifier: string;\n  /**\n   * Data for a photo asset as a base64 encoded string (JPEG only supported)\n   */\n  data: string;\n  /**\n   * ISO date string for creation date of asset\n   */\n  creationDate: string;\n  /**\n   * Duration of asset in seconds, only returned for videos\n   */\n  duration?: number;\n  /**\n   * Full width of original asset\n   */\n  fullWidth: number;\n  /**\n   * Full height of original asset\n   */\n  fullHeight: number;\n  /**\n   * Width of thumbnail preview\n   */\n  thumbnailWidth: number;\n  /**\n   * Height of thumbnail preview\n   */\n  thumbnailHeight: number;\n  /**\n   * Location metadata for the asset\n   */\n  location: MediaLocation;\n}\n\nexport interface MediaPath {\n  /**\n   * Path to media asset\n   */\n  path: string;\n  /**\n   * Identifier for media asset\n   */\n  identifier: string;\n}\n\nexport interface MediaLocation {\n  /**\n   * GPS latitude image was taken at\n   */\n  latitude: number;\n  /**\n   * GPS longitude image was taken at\n   */\n  longitude: number;\n  /**\n   * Heading of user at time image was taken\n   */\n  heading: number;\n  /**\n   * Altitude of user at time image was taken\n   */\n  altitude: number;\n  /**\n   * Speed of user at time image was taken\n   */\n  speed: number;\n}\n\nexport interface MediaAlbumResponse {\n  albums: MediaAlbum[];\n}\n\nexport interface MediaAlbum {\n  identifier: string;\n  name: string;\n  type?: MediaAlbumType;\n}\n\nexport declare enum MediaAlbumType {\n  /**\n   * Album is a \"smart\" album (such as Favorites or Recently Added)\n   */\n  Smart = 'smart',\n  /**\n   * Album is a cloud-shared album\n   */\n  Shared = 'shared',\n  /**\n   * Album is a user-created album\n   */\n  User = 'user',\n}\n\nexport interface MediaAlbumCreate {\n  name: string;\n}\n\nexport interface PhotoResponse {\n  /**\n   * Available on Android only.\n   */\n  filePath?: string;\n  /**\n   * Available on iOS only. To get a file path\n   * for an image on iOS, pass this identifier to\n   * `getMediaByIdentifier`.\n   */\n  identifier?: string;\n}\n"]}